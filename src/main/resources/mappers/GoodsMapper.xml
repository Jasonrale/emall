<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.emall.dao.GoodsMapper">
	<resultMap id="BaseResultMap" type="com.emall.entity.Goods">
		<id column="goods_id" jdbcType="VARCHAR" property="goodsId"/>
		<result column="goods_name" jdbcType="VARCHAR" property="goodsName"/>
		<result column="goods_describe" jdbcType="VARCHAR" property="goodsDescribe"/>
		<result column="category_id" jdbcType="VARCHAR" property="categoryId"/>
		<result column="goods_price" jdbcType="DECIMAL" property="goodsPrice"/>
		<result column="goods_stock" jdbcType="INTEGER" property="goodsStock"/>
		<result column="goods_image" jdbcType="VARCHAR" property="goodsImage"/>
		<result column="goods_details" jdbcType="VARCHAR" property="goodsDetails"/>
		<result column="goods_status" jdbcType="INTEGER" property="goodsStatus"/>
	</resultMap>
	
	<sql id="Base_Column_List">
		goods_id, goods_name, goods_describe, category_id, goods_price, goods_stock, goods_image,
    	goods_details, goods_status
	</sql>
	
	<select id="count" resultType="java.lang.Integer">
		select count(1)
		from goods
	</select>
	
	<select id="countByKeyWord" parameterType="java.lang.String" resultType="java.lang.Integer">
		select count(1)
		from goods
		where goods_name like #{keyWord,jdbcType=VARCHAR}
	</select>
	
	<select id="countByKeyWordForUser" parameterType="java.lang.String" resultType="java.lang.Integer">
		select count(1)
		from goods
		where goods_name like #{keyWord,jdbcType=VARCHAR}
		  and goods_status = 1
	</select>
	
	<select id="countByCategoryIdForUser" parameterType="java.lang.String" resultType="java.lang.Integer">
		select count(1)
		from goods
		where category_id = #{categoryId,jdbcType=VARCHAR}
		  and goods_status = 1
	</select>
	
	<select id="queryAll" resultMap="BaseResultMap">
		select g.goods_id,
			   g.goods_name,
			   g.goods_describe,
			   g.category_id,
			   g.goods_price,
			   g.goods_stock,
			   g.goods_image,
			   g.goods_details,
			   g.goods_status
		from goods g
		inner join (select goods_id from goods order by goods_id limit #{limit} offset #{offset}) ids
		on g.goods_id = ids.goods_id
	</select>
	
	<select id="selectByKeyWord" resultMap="BaseResultMap">
		select g.goods_id,
			   g.goods_name,
			   g.goods_describe,
			   g.category_id,
			   g.goods_price,
			   g.goods_stock,
			   g.goods_image,
			   g.goods_details,
			   g.goods_status
		from goods g
				 inner join (select goods_id
							 from goods
							 where goods_status = 1
							   and goods_name like #{keyWord,jdbcType=VARCHAR}
							 order by goods_id
							 limit #{limit} offset #{offset}) ids
							on g.goods_id = ids.goods_id
	</select>
	
	<select id="selectByKeyWordPaged" resultMap="BaseResultMap">
		select g.goods_id,
			   g.goods_name,
			   g.goods_describe,
			   g.category_id,
			   g.goods_price,
			   g.goods_stock,
			   g.goods_image,
			   g.goods_details,
			   g.goods_status
		from goods g
		inner join (select goods_id from goods where goods_name like #{keyWord,jdbcType=VARCHAR} order by goods_id limit #{limit} offset #{offset}) ids
		on g.goods_id = ids.goods_id
	</select>
	
	<select id="selectByKeyWordAsc" resultMap="BaseResultMap">
		select g.goods_id,
			   g.goods_name,
			   g.goods_describe,
			   g.category_id,
			   g.goods_price,
			   g.goods_stock,
			   g.goods_image,
			   g.goods_details,
			   g.goods_status
		from goods g
				 inner join (select goods_id
							 from goods
							 where goods_status = 1
							   and goods_name like #{keyWord,jdbcType=VARCHAR}
							 order by goods_price
							 limit #{limit} offset #{offset}) ids
							on g.goods_id = ids.goods_id
	</select>
	
	<select id="selectByKeyWordDesc" resultMap="BaseResultMap">
		select g.goods_id,
			   g.goods_name,
			   g.goods_describe,
			   g.category_id,
			   g.goods_price,
			   g.goods_stock,
			   g.goods_image,
			   g.goods_details,
			   g.goods_status
		from goods g
				 inner join (select goods_id
							 from goods
							 where goods_status = 1
							   and goods_name like #{keyWord,jdbcType=VARCHAR}
							 order by goods_price desc
							 limit #{limit} offset #{offset}) ids
							on g.goods_id = ids.goods_id
	</select>
	
	<select id="selectByCategoryId" resultMap="BaseResultMap">
		select g.goods_id,
			   g.goods_name,
			   g.goods_describe,
			   g.category_id,
			   g.goods_price,
			   g.goods_stock,
			   g.goods_image,
			   g.goods_details,
			   g.goods_status
		from goods g
				 inner join (select goods_id
							 from goods
							 where goods_status = 1
							   and category_id = #{categoryId,jdbcType=VARCHAR}
							 order by goods_id
							 limit #{limit} offset #{offset}) ids
							on g.goods_id = ids.goods_id
	</select>
	
	<select id="selectByCategoryIdAsc" resultMap="BaseResultMap">
		select g.goods_id,
			   g.goods_name,
			   g.goods_describe,
			   g.category_id,
			   g.goods_price,
			   g.goods_stock,
			   g.goods_image,
			   g.goods_details,
			   g.goods_status
		from goods g
				 inner join (select goods_id
							 from goods
							 where goods_status = 1
							   and category_id = #{categoryId,jdbcType=VARCHAR}
							 order by goods_price asc
							 limit #{limit} offset #{offset}) ids
							on g.goods_id = ids.goods_id
	</select>
	
	<select id="selectByCategoryIdDesc" resultMap="BaseResultMap">
		select g.goods_id,
			   g.goods_name,
			   g.goods_describe,
			   g.category_id,
			   g.goods_price,
			   g.goods_stock,
			   g.goods_image,
			   g.goods_details,
			   g.goods_status
		from goods g
				 inner join (select goods_id
							 from goods
							 where goods_status = 1
							   and category_id = #{categoryId,jdbcType=VARCHAR}
							 order by goods_price desc
							 limit #{limit} offset #{offset}) ids
							on g.goods_id = ids.goods_id
	</select>
	
	<select id="selectByGoodsId" parameterType="java.lang.String" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List"/>
		from goods
		where goods_id = #{goodsId,jdbcType=VARCHAR}
	</select>
	
	<update id="pull" parameterType="java.lang.String">
		update goods
		set goods_status = 0
		where goods_id = #{goodsId,jdbcType=VARCHAR}
	</update>
	
	<update id="put" parameterType="java.lang.String">
		update goods
		set goods_status = 1
		where goods_id = #{goodsId,jdbcType=VARCHAR}
	</update>
	
	<delete id="deleteByGoodsId" parameterType="java.lang.String">
		delete
		from goods
		where goods_id = #{goodsId,jdbcType=VARCHAR}
	</delete>
	
	<insert id="insert" parameterType="com.emall.entity.Goods">
		insert into goods (goods_id, goods_name, goods_describe, category_id, goods_price, goods_stock, goods_image,
						   goods_details, goods_status)
		values (#{goodsId,jdbcType=VARCHAR}, #{goodsName,jdbcType=VARCHAR}, #{goodsDescribe,jdbcType=VARCHAR},
				#{categoryId,jdbcType=VARCHAR}, #{goodsPrice,jdbcType=DECIMAL}, #{goodsStock,jdbcType=INTEGER},
				#{goodsImage,jdbcType=VARCHAR}, #{goodsDetails,jdbcType=VARCHAR}, #{goodsStatus,jdbcType=INTEGER})
	</insert>
	
	<update id="updateByGoodsId" parameterType="com.emall.entity.Goods">
		update goods
		set goods_name     = #{goodsName,jdbcType=VARCHAR},
			goods_describe = #{goodsDescribe,jdbcType=VARCHAR},
			category_id    = #{categoryId,jdbcType=VARCHAR},
			goods_price    = #{goodsPrice,jdbcType=DECIMAL},
			goods_stock    = #{goodsStock,jdbcType=INTEGER},
			goods_status   = #{goodsStatus,jdbcType=INTEGER}
		where goods_id = #{goodsId,jdbcType=VARCHAR}
	</update>
	
	<update id="reduceStock">
		update goods
		set goods_stock = goods_stock - #{count,jdbcType=INTEGER}
		where goods_id = #{goodsId,jdbcType=VARCHAR}
		  and goods_stock >= #{count,jdbcType=INTEGER};
	</update>
</mapper>